import React, { useState, useEffect } from 'react';
import Swal from 'sweetalert2';
import withReactContent from 'sweetalert2-react-content';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger } from '@/components/ui/dialog';
import { Checkbox } from '@/components/ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Plus, Clock, CheckCircle, XCircle, Package, Trash2, Trash } from 'lucide-react';
import { collection, query, orderBy, where, onSnapshot } from "firebase/firestore";
import { db } from '@/lib/firebase'; 
import { Loader2 } from 'lucide-react';

import { useAuth } from '@/contexts/AuthContext';
import { getDeviceTypeDisplayName, DeviceRequest,
  getDeviceRequestsRealtime,
   createDeviceRequest, getWardById ,getDeviceRequests, deleteDeviceRequest, markDeviceRequestUpdateAsViewed} from '@/lib/services/deviceRequestService';

const MySwal = withReactContent(Swal);

const DeviceRequestsPage: React.FC = () => {
  const { user } = useAuth();
  const [requests, setRequests] = useState<DeviceRequest[]>([]);
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isBulkDeleteDialogOpen, setIsBulkDeleteDialogOpen] = useState(false);
  const [selectedRequests, setSelectedRequests] = useState<string[]>([]);
  const [selectedRequest, setSelectedRequest] = useState<DeviceRequest | null>(null);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [isDetailDialogOpen, setIsDetailDialogOpen] = useState(false);


  const [newRequest, setNewRequest] = useState({
    deviceType: 'camera',
    quantity: 1,
    reason: '',
  });

  const DEVICE_TYPES = [
    { value: 'pc', label: 'M√°y t√≠nh ƒë·ªÉ b√†n' },
    { value: 'laptop', label: 'Laptop' },
    { value: 'camera', label: 'Camera' },
    { value: 'router', label: 'Router' },
    { value: 'sensor', label: 'C·∫£m bi·∫øn' },
    { value: 'printer', label: 'M√°y in' },
    { value: 'monitor', label: 'M√†n h√¨nh' },
    { value: 'server', label: 'Server' },
    { value: 'switch', label: 'Switch' },
    { value: 'ups', label: 'UPS' },
    { value: 'ip_phone', label: 'ƒêi·ªán tho·∫°i IP' },
    { value: 'other', label: 'Thi·∫øt b·ªã kh√°c' },
  ];
  useEffect(() => {
    if (!user || !user.wardId) return;
  
    setLoading(true); // B·∫≠t loading khi b·∫Øt ƒë·∫ßu fetch
  
    function convertTimestamp(value: any): Date {
      return value && 'toDate' in value ? value.toDate() : value instanceof Date ? value : new Date();
    }
  
    const unsubscribe = getDeviceRequestsRealtime(user.wardId, (data) => {
      console.log('üîÑ Real-time update received:', {
        wardId: user.wardId,
        requestCount: data.length,
        requests: data.map(r => ({ id: r.id, status: r.status, deviceType: r.deviceType }))
      });
      
      const converted = data.map(d => ({
        ...d,
        createdAt: convertTimestamp(d.createdAt),
        updatedAt: convertTimestamp(d.updatedAt),
      }));
      setRequests(converted);
      setLoading(false); 
    });
  
    return () => unsubscribe();
  }, [user]);
  
  
  
  if (!user || loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p className="text-muted-foreground">ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  // -------------------- Helpers -------------------- //
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'warning';
      case 'approved': return 'success';
      case 'rejected': return 'destructive';
      case 'completed': return 'default';
      case 'delivering': return 'secondary';
      case 'received': return 'default';
      default: return 'secondary';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending': return 'Ch·ªù duy·ªát';
      case 'approved': return 'ƒê√£ duy·ªát';
      case 'rejected': return 'T·ª´ ch·ªëi';
      case 'completed': return 'ƒê√£ c·∫•p ph√°t';
      case 'delivering': return 'ƒêang giao';
      case 'received': return 'ƒê√£ nh·∫≠n';
      default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending': return <Clock className="h-4 w-4" />;
      case 'approved': return <CheckCircle className="h-4 w-4" />;
      case 'rejected': return <XCircle className="h-4 w-4" />;
      case 'completed': return <Package className="h-4 w-4" />;
      case 'delivering': return <Package className="h-4 w-4" />;
      case 'received': return <CheckCircle className="h-4 w-4" />;
      default: return null;
    }
  };

  // -------------------- Submit Request -------------------- //
  const handleSubmitRequest = async () => {
    if (!newRequest.reason.trim()) {
      return MySwal.fire({
        icon: 'error',
        title: 'L·ªói',
        text: 'Vui l√≤ng nh·∫≠p l√Ω do y√™u c·∫ßu',
      });
    }
     setSubmitting(true); // b·∫≠t loading
    try {
      const ward = await getWardById(user?.wardId || '');
      if (!ward) throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ph∆∞·ªùng');

      const requestId = await createDeviceRequest(
        {
          deviceName: newRequest.deviceType,
          deviceType: newRequest.deviceType as any,
          quantity: newRequest.quantity,
          reason: newRequest.reason,
          wardId: ward.id,
          wardName: ward.name,
        },
        user?.id || '',
        user?.displayName || user?.email || 'Ng∆∞·ªùi d√πng'
      );
      // const updatedRequests = await getDeviceRequests(user?.wardId);
      // setRequests(updatedRequests);
      // Th√™m v√†o state
      // setRequests([
      //   {
      //     id: requestId,
      //     wardId: ward.id,
      //     wardName: ward.name,
      //     deviceType: newRequest.deviceType as 'camera' | 'sensor' | 'router' | 'other',
      //     deviceName: newRequest.deviceType, // th√™m tr∆∞·ªùng n√†y
      //     quantity: newRequest.quantity,
      //     reason: newRequest.reason,
      //     requestedBy: user?.id || '',
      //     status: 'pending',
      //     createdAt: new Date(),
      //     updatedAt: new Date(),
      //   } as DeviceRequest, // √©p ki·ªÉu cho TypeScript
      //   ...requests
      // ]);
      

      setIsAddDialogOpen(false);
      setNewRequest({ deviceType: 'camera', quantity: 1, reason: '' });
      

      MySwal.fire({
        icon: 'success',
        title: 'G·ª≠i y√™u c·∫ßu th√†nh c√¥ng',
        text: `Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c g·ª≠i trung t√¢m`,
        timer:2000,
      });
    } catch (error: any) {
      MySwal.fire({
        icon: 'error',
        title: 'L·ªói',
        text: error.message,
      });
    }
     setSubmitting(false);
  };

  // Delete functions
  const openDeleteDialog = (request: DeviceRequest) => {
    setSelectedRequest(request);
    setIsDeleteDialogOpen(true);
  };

  const handleDeleteRequest = async () => {
    if (!selectedRequest) return;
    
    try {
      await deleteDeviceRequest(selectedRequest.id, user?.id || '', user?.role || 'ward');
      setRequests(prev => prev.filter(r => r.id !== selectedRequest.id));
      MySwal.fire({
        icon: 'success',
        title: 'X√≥a th√†nh c√¥ng',
        text: 'Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng.',
      });
      setIsDeleteDialogOpen(false);
      setSelectedRequest(null);
    } catch (error: any) {
      MySwal.fire({
        icon: 'error',
        title: 'L·ªói',
        text: error.message,
      });
    }
  };

  // Bulk delete functions
  const handleSelectRequest = (requestId: string, checked: boolean) => {
    if (checked) {
      setSelectedRequests(prev => [...prev, requestId]);
    } else {
      setSelectedRequests(prev => prev.filter(id => id !== requestId));
    }
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      const deletableRequests = requests.filter(request => 
        request.status === 'pending' || 
        request.status === 'rejected'
      );
      setSelectedRequests(deletableRequests.map(r => r.id));
    } else {
      setSelectedRequests([]);
    }
  };

  const openBulkDeleteDialog = () => {
    if (selectedRequests.length === 0) {
      MySwal.fire({
        icon: 'warning',
        title: 'Ch∆∞a ch·ªçn y√™u c·∫ßu',
        text: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt y√™u c·∫ßu ƒë·ªÉ x√≥a.',
      });
      return;
    }
    setIsBulkDeleteDialogOpen(true);
  };

  const handleBulkDelete = async () => {
    try {
      const deletePromises = selectedRequests.map(id => deleteDeviceRequest(id, user?.id || '', user?.role || 'ward'));
      await Promise.all(deletePromises);
      
      setRequests(prev => prev.filter(r => !selectedRequests.includes(r.id)));
      setSelectedRequests([]);
      MySwal.fire({
        icon: 'success',
        title: 'X√≥a th√†nh c√¥ng',
        text: `ƒê√£ x√≥a ${selectedRequests.length} y√™u c·∫ßu.`,
      });
      setIsBulkDeleteDialogOpen(false);
    } catch (error: any) {
      MySwal.fire({
        icon: 'error',
        title: 'L·ªói',
        text: error.message || 'Kh√¥ng th·ªÉ x√≥a y√™u c·∫ßu',
      });
    }
  };

  // H√†m m·ªü dialog chi ti·∫øt y√™u c·∫ßu
  const openDetailDialog = async (request: DeviceRequest) => {
    console.log('=== OPEN DETAIL DIALOG ===');
    console.log('Request ID:', request.id);
    console.log('Request:', request);
    
    setSelectedRequest(request);
    setIsDetailDialogOpen(true);
    
    // ƒê√°nh d·∫•u ƒë√£ xem c·∫≠p nh·∫≠t m·ªõi n·∫øu c√≥ (ch·ªâ khi c·∫≠p nh·∫≠t t·ª´ trung t√¢m)
    if (request.hasNewUpdate && request.lastUpdateByRole === 'center') {
      try {
        await markDeviceRequestUpdateAsViewed(request.id);
        setRequests(prev => prev.map(r => 
          r.id === request.id ? { ...r, hasNewUpdate: false } : r
        ));
      } catch (error) {
        console.error('Error marking device request update as viewed:', error);
      }
    }
  };

  const handleDeleteAll = async () => {
    const deletableRequests = requests.filter(request => 
      request.status === 'pending' || 
      request.status === 'rejected'
    );
    
    if (deletableRequests.length === 0) {
      MySwal.fire({
        icon: 'warning',
        title: 'Kh√¥ng c√≥ y√™u c·∫ßu ƒë·ªÉ x√≥a',
        text: 'Kh√¥ng c√≥ y√™u c·∫ßu n√†o c√≥ th·ªÉ x√≥a.',
      });
      return;
    }

    try {
      const deletePromises = deletableRequests.map(request => deleteDeviceRequest(request.id, user?.id || '', user?.role || 'ward'));
      await Promise.all(deletePromises);
      
      setRequests(prev => prev.filter(r => 
        r.status !== 'pending' && 
        r.status !== 'rejected'
      ));
      setSelectedRequests([]);
      MySwal.fire({
        icon: 'success',
        title: 'X√≥a th√†nh c√¥ng',
        text: `ƒê√£ x√≥a t·∫•t c·∫£ ${deletableRequests.length} y√™u c·∫ßu.`,
      });
    } catch (error: any) {
      MySwal.fire({
        icon: 'error',
        title: 'L·ªói',
        text: error.message || 'Kh√¥ng th·ªÉ x√≥a y√™u c·∫ßu',
      });
    }
  };

  // -------------------- Render -------------------- //
  const pendingRequests = requests.filter(r => r.status === 'pending');
  const approvedRequests = requests.filter(r => r.status === 'approved');
  const rejectedRequests = requests.filter(r => r.status === 'rejected');
  const receivedRequests = requests.filter(r => r.status === 'received');
  
  // Ch·ªâ hi·ªÉn th·ªã c√°c y√™u c·∫ßu t·ª´ "Ch·ªù duy·ªát" ƒë·∫øn "ƒê√£ duy·ªát" (kh√¥ng bao g·ªìm delivering v√† received)
  const displayRequests = requests.filter(r => 
    r.status === 'pending' || r.status === 'approved' || r.status === 'rejected'
  );

  return (
    
    <div className="space-y-6">
      {/* Header & Button */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Y√™u c·∫ßu thi·∫øt b·ªã</h1>
          <p className="text-muted-foreground">Qu·∫£n l√Ω y√™u c·∫ßu c·∫•p ph√°t thi·∫øt b·ªã c·ªßa ph∆∞·ªùng</p>
        </div>

        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
          <DialogTrigger asChild>
            <Button className="flex items-center space-x-2">
              <Plus className="h-4 w-4" />
              <span>T·∫°o y√™u c·∫ßu m·ªõi</span>
            </Button>
          </DialogTrigger>

          <DialogContent className="max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>T·∫°o y√™u c·∫ßu c·∫•p ph√°t thi·∫øt b·ªã</DialogTitle>
              <DialogDescription>
                ƒêi·ªÅn th√¥ng tin chi ti·∫øt cho y√™u c·∫ßu c·∫•p ph√°t thi·∫øt b·ªã m·ªõi
              </DialogDescription>
            </DialogHeader>

            <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="deviceType">Lo·∫°i thi·∫øt b·ªã</Label>
              <Select
                value={newRequest.deviceType}
                onValueChange={(value) => setNewRequest({ ...newRequest, deviceType: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn lo·∫°i thi·∫øt b·ªã" />
                </SelectTrigger>
                <SelectContent>
                  {DEVICE_TYPES.map((t) => (
                    <SelectItem key={t.value} value={t.value}>{t.label}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>


              <div className="space-y-2">
                <Label htmlFor="quantity">S·ªë l∆∞·ª£ng</Label>
                <Input
                  id="quantity"
                  type="number"
                  min={1}
                  value={newRequest.quantity}
                  onChange={(e) =>
                    setNewRequest({ ...newRequest, quantity: parseInt(e.target.value) || 1 })
                  }
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="reason">L√Ω do y√™u c·∫ßu</Label>
                <Textarea
                  id="reason"
                  value={newRequest.reason}
                  onChange={(e) => setNewRequest({ ...newRequest, reason: e.target.value })}
                  placeholder="M√¥ t·∫£ l√Ω do c·∫ßn thi·∫øt b·ªã n√†y..."
                  rows={4}
                />
              </div>
            </div>

            <DialogFooter>
              <Button variant="outline" onClick={() => setIsAddDialogOpen(false)}>H·ªßy</Button>
              <Button onClick={handleSubmitRequest} disabled={submitting}>
              {submitting ? "ƒêang g·ª≠i..." : "G·ª≠i y√™u c·∫ßu"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex justify-between pb-2">
            <CardTitle className="text-sm font-medium">T·ªïng y√™u c·∫ßu</CardTitle>
            <Package className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{displayRequests.length}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex justify-between pb-2">
            <CardTitle className="text-sm font-medium">Ch·ªù duy·ªát</CardTitle>
            <Clock className="h-4 w-4 text-warning" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-warning">{pendingRequests.length}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex justify-between pb-2">
            <CardTitle className="text-sm font-medium">ƒê√£ duy·ªát</CardTitle>
            <CheckCircle className="h-4 w-4 text-success" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-success">{approvedRequests.length}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex justify-between pb-2">
            <CardTitle className="text-sm font-medium">T·ª´ ch·ªëi</CardTitle>
            <XCircle className="h-4 w-4 text-destructive" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-destructive">{rejectedRequests.length}</div>
          </CardContent>
        </Card>
      </div>

      {/* Requests Table */}
      <Card>
        <CardHeader>
          <CardTitle>Danh s√°ch y√™u c·∫ßu ({displayRequests.length})</CardTitle>
        </CardHeader>
        <CardContent>
          {/* Bulk Actions - Ph∆∞·ªùng kh√¥ng c√≥ quy·ªÅn x√≥a n√™n ·∫©n */}

          <Table>
            <TableHeader>
              <TableRow>
                {/* <TableHead className="w-12">Ch·ªçn</TableHead> */}
                <TableHead>Lo·∫°i thi·∫øt b·ªã</TableHead>
                <TableHead>S·ªë l∆∞·ª£ng</TableHead>
                <TableHead>L√Ω do</TableHead>
                <TableHead>Ng√†y y√™u c·∫ßu</TableHead>
                <TableHead>Tr·∫°ng th√°i</TableHead>
                <TableHead>Ph·∫£n h·ªìi</TableHead>
                <TableHead>Thao t√°c</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {displayRequests.map((request) => (
                <TableRow 
                  key={request.id}
                  className="cursor-pointer hover:bg-muted/50"
                  onClick={() => openDetailDialog(request)}
                >
                  {/* <TableCell onClick={(e) => e.stopPropagation()}>
                    <Checkbox
                      checked={selectedRequests.includes(request.id)}
                      onCheckedChange={(checked) => handleSelectRequest(request.id, checked as boolean)}
                      disabled={request.status !== 'pending' && request.status !== 'rejected'}
                    />
                  </TableCell> */}
                  <TableCell>
                    <Badge variant="outline">{getDeviceTypeDisplayName(request.deviceType)}</Badge>
                  </TableCell>
                  <TableCell>{request.quantity}</TableCell>
                  <TableCell>{request.reason}</TableCell>
                  <TableCell>
                    {request.createdAt.toLocaleDateString('vi-VN', {
                      day: '2-digit',
                      month: '2-digit',
                      year: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      {getStatusIcon(request.status)}
                      <Badge variant={getStatusColor(request.status) as any}>{getStatusText(request.status)}</Badge>
                      {request.hasNewUpdate && request.lastUpdateByRole === 'center' && (
                        <Badge variant="destructive" className="text-xs px-2 py-1 animate-pulse shadow-lg ring-2 ring-red-300 ring-opacity-50">
                          C√≥ c·∫≠p nh·∫≠t m·ªõi
                        </Badge>
                      )}
                    </div>
                    {request.hasNewUpdate && request.lastUpdateByName && (
                      <p className="text-xs text-blue-600 mt-1">
                        C·∫≠p nh·∫≠t b·ªüi: {request.lastUpdateByName}
                      </p>
                    )}
                  </TableCell>
                  <TableCell>
                    {request.notes && <p className="text-xs text-muted-foreground">{request.notes}</p>}
                  </TableCell>
                  <TableCell onClick={(e) => e.stopPropagation()}>
                    {/* Ph∆∞·ªùng kh√¥ng c√≥ quy·ªÅn x√≥a - ch·ªâ trung t√¢m m·ªõi c√≥ quy·ªÅn */}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
        
      </Card>

      {/* Delete Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent className="max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>X√≥a y√™u c·∫ßu thi·∫øt b·ªã</DialogTitle>
            <DialogDescription>
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a y√™u c·∫ßu n√†y kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
            </DialogDescription>
          </DialogHeader>
          
          {selectedRequest && (
            <div className="py-4">
              <div className="p-3 bg-muted rounded-md">
                <p><b>Lo·∫°i thi·∫øt b·ªã:</b> {getDeviceTypeDisplayName(selectedRequest.deviceType)}</p>
                <p><b>S·ªë l∆∞·ª£ng:</b> {selectedRequest.quantity}</p>
                <p><b>L√Ω do:</b> {selectedRequest.reason}</p>
                <p><b>Ng√†y y√™u c·∫ßu:</b> {selectedRequest.createdAt.toLocaleDateString('vi-VN', {
                  day: '2-digit',
                  month: '2-digit',
                  year: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}</p>
                <p><b>Tr·∫°ng th√°i:</b> {getStatusText(selectedRequest.status)}</p>
              </div>
            </div>
          )}

          <DialogFooter className="space-x-2">
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>H·ªßy</Button>
            <Button variant="destructive" onClick={handleDeleteRequest}>X√≥a</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Bulk Delete Dialog */}
      <Dialog open={isBulkDeleteDialogOpen} onOpenChange={setIsBulkDeleteDialogOpen}>
        <DialogContent className="max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>X√≥a nhi·ªÅu y√™u c·∫ßu</DialogTitle>
            <DialogDescription>
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a {selectedRequests.length} y√™u c·∫ßu ƒë√£ ch·ªçn kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
            </DialogDescription>
          </DialogHeader>
          
          <div className="py-4">
            <div className="max-h-40 overflow-y-auto space-y-2">
              {selectedRequests.map(id => {
                const request = requests.find(r => r.id === id);
                return request ? (
                  <div key={id} className="p-2 bg-muted rounded text-sm">
                    <p><b>{getDeviceTypeDisplayName(request.deviceType)}</b> - {getStatusText(request.status)}</p>
                  </div>
                ) : null;
              })}
            </div>
          </div>

          <DialogFooter className="space-x-2">
            <Button variant="outline" onClick={() => setIsBulkDeleteDialogOpen(false)}>H·ªßy</Button>
            <Button variant="destructive" onClick={handleBulkDelete}>X√≥a {selectedRequests.length} y√™u c·∫ßu</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Dialog chi ti·∫øt y√™u c·∫ßu */}
      <Dialog open={isDetailDialogOpen} onOpenChange={setIsDetailDialogOpen}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Chi ti·∫øt y√™u c·∫ßu thi·∫øt b·ªã</DialogTitle>
            <DialogDescription>
              {selectedRequest && (
                <>
                  Y√™u c·∫ßu: {getDeviceTypeDisplayName(selectedRequest.deviceType)} - S·ªë l∆∞·ª£ng: {selectedRequest.quantity}
                </>
              )}
            </DialogDescription>
          </DialogHeader>

          {selectedRequest && (
            <div className="space-y-4 py-4">
              {/* Th√¥ng tin c∆° b·∫£n */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Lo·∫°i thi·∫øt b·ªã</Label>
                  <p className="text-lg font-semibold">{getDeviceTypeDisplayName(selectedRequest.deviceType)}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">S·ªë l∆∞·ª£ng</Label>
                  <p className="text-lg font-semibold">{selectedRequest.quantity}</p>
                </div>
              </div>

              <div>
                <Label className="text-sm font-medium text-muted-foreground">L√Ω do y√™u c·∫ßu</Label>
                <p className="text-base">{selectedRequest.reason}</p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Ng√†y y√™u c·∫ßu</Label>
                  <p className="text-base">{selectedRequest.createdAt?.toLocaleDateString('vi-VN')}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Tr·∫°ng th√°i</Label>
                  <div className="mt-1">
                    <Badge variant={
                      selectedRequest.status === 'pending' ? 'secondary' :
                      selectedRequest.status === 'approved' ? 'default' :
                      selectedRequest.status === 'rejected' ? 'destructive' : 'outline'
                    }>
                      {selectedRequest.status === 'pending' ? 'Ch·ªù duy·ªát' :
                       selectedRequest.status === 'approved' ? 'ƒê√£ duy·ªát' :
                       selectedRequest.status === 'rejected' ? 'T·ª´ ch·ªëi' : selectedRequest.status}
                    </Badge>
                  </div>
                </div>
              </div>

              {selectedRequest.notes && (
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Ph·∫£n h·ªìi t·ª´ trung t√¢m</Label>
                  <p className="text-base">{selectedRequest.notes}</p>
                </div>
              )}

              {selectedRequest.approvedAt && (
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Ng√†y duy·ªát</Label>
                  <p className="text-base">{selectedRequest.approvedAt?.toLocaleDateString('vi-VN')}</p>
                </div>
              )}
            </div>
          )}

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDetailDialogOpen(false)}>ƒê√≥ng</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
    </div>
  );
};

export default DeviceRequestsPage;
